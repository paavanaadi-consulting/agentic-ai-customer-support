version: '3.8'

services:
  # AWS MCP Server Service
  mcp-aws:
    build:
      context: ./mcp-aws
      dockerfile: Dockerfile
    ports:
      - "8766:8766"  # Lambda Tool MCP Server
      - "8767:8767"  # Messaging MCP Server
      - "8768:8768"  # MQ MCP Server
    environment:
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_MCP_LAMBDA_PORT=8766
      - AWS_MCP_MESSAGING_PORT=8767
      - AWS_MCP_MQ_PORT=8768
    volumes:
      - ./mcp-aws/config:/app/config
    healthcheck:
      test: ["CMD", "/app/health_check.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped
    networks:
      - agentic_network

  # API Service
  api-service:
    build:
      context: ..
      dockerfile: ops/api/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=customer_support
      - DB_USER=admin
      - DB_PASSWORD=password
      - MCP_POSTGRES_URL=http://mcp-postgres:8001
      - MCP_KAFKA_URL=http://mcp-kafka:8002
      - MCP_AWS_LAMBDA_URL=http://mcp-aws:8766
      - MCP_AWS_MESSAGING_URL=http://mcp-aws:8767
      - MCP_AWS_MQ_URL=http://mcp-aws:8768
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - mcp-postgres
      - mcp-kafka
      - mcp-aws
    volumes:
      - ../logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - agentic_network

  # Database Service
  postgres:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=customer_support
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d customer_support"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - agentic_network

  # Vector Database (Qdrant)
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - agentic_network

  # Kafka Service
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - agentic_network

  # Zookeeper (for Kafka)
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    restart: unless-stopped
    networks:
      - agentic_network

  # Postgres MCP Server
  mcp-postgres:
    build:
      context: ./mcp-postgres
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=password
      - DB_NAME=customer_support
      - MCP_PORT=8001
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - agentic_network

  # Kafka MCP Server
  mcp-kafka:
    build:
      context: ./mcp-kafka
      dockerfile: Dockerfile.mcp
    ports:
      - "8002:8002"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MCP_PORT=8002
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - agentic_network

  # Consumer Service
  consumer-service:
    build:
      context: ..
      dockerfile: ops/agents/Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=admin
      - DB_PASSWORD=password
      - DB_NAME=customer_support
      - VECTOR_DB_HOST=qdrant
      - VECTOR_DB_PORT=6333
      - LOG_LEVEL=INFO
    depends_on:
      - postgres
      - kafka
      - qdrant
    restart: unless-stopped
    networks:
      - agentic_network

networks:
  agentic_network:
    driver: bridge

volumes:
  pgdata:
  qdrant_data:
  zookeeper_data:
